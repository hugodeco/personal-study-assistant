"""
Gerador de Formul√°rios Baseado em JSON
Sistema universal para gerar formul√°rios educacionais a partir de arquivos JSON
"""

import sys
import os
import json

# Adicionar pasta global ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'global'))

from config import get_authenticated_service, get_drive_service


def validar_json_schema(data):
    """
    Valida se o JSON est√° no formato correto.
    """
    required_fields = ['metadata', 'content', 'questions']
    for field in required_fields:
        if field not in data:
            raise ValueError(f"Campo obrigat√≥rio '{field}' n√£o encontrado no JSON")
    
    # Validar metadata
    metadata_required = ['title', 'description', 'subject', 'grade', 'topic']
    for field in metadata_required:
        if field not in data['metadata']:
            raise ValueError(f"Campo obrigat√≥rio 'metadata.{field}' n√£o encontrado")
    
    # Validar quest√µes
    if not isinstance(data['questions'], list) or len(data['questions']) == 0:
        raise ValueError("O campo 'questions' deve ser uma lista n√£o vazia")
    
    for i, question in enumerate(data['questions']):
        required_q_fields = ['id', 'section', 'question', 'options', 'correct_answer']
        for field in required_q_fields:
            if field not in question:
                raise ValueError(f"Campo obrigat√≥rio '{field}' n√£o encontrado na quest√£o {i+1}")
    
    return True


def carregar_configuracao_quiz(caminho_json):
    """
    Carrega e valida a configura√ß√£o do quiz a partir do arquivo JSON.
    """
    try:
        with open(caminho_json, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        validar_json_schema(data)
        print(f"‚úÖ Configura√ß√£o carregada: {data['metadata']['title']}")
        return data
    
    except FileNotFoundError:
        print(f"‚ùå Arquivo JSON n√£o encontrado: {caminho_json}")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {e}")
        return None
    except ValueError as e:
        print(f"‚ùå Erro de valida√ß√£o: {e}")
        return None


def criar_formulario_do_json(caminho_json):
    """
    Cria ou atualiza um formul√°rio do Google Forms baseado no arquivo JSON.
    Se um formul√°rio com o mesmo nome j√° existir, ele ser√° atualizado.
    """
    try:
        print("üöÄ Iniciando cria√ß√£o/atualiza√ß√£o de formul√°rio baseado em JSON...")
        
        # 1. Carregar configura√ß√£o
        config = carregar_configuracao_quiz(caminho_json)
        if not config:
            return None
        
        # 2. Extrair nome do arquivo JSON (sem extens√£o) para usar como nome do formul√°rio
        json_filename = os.path.splitext(os.path.basename(caminho_json))[0]
        form_name = json_filename  # Nome do arquivo ser√° o nome do formul√°rio no Drive
        
        print(f"üìÑ Nome do formul√°rio: {form_name}")
        print(f"üìã T√≠tulo: {config['metadata']['title']}")
        
        # 3. Verificar se j√° existe um formul√°rio com esse nome
        from config import find_existing_form_by_name, update_form_title, get_drive_service
        
        existing_form_id = find_existing_form_by_name(form_name)
        
        if existing_form_id:
            print("üîÑ Formul√°rio existente encontrado! Preparando para atualiza√ß√£o...")
            
            # Atualizar formul√°rio existente
            form_id = existing_form_id
            
            # Atualizar t√≠tulo no Drive e no Forms
            update_form_title(form_id, form_name)
            
            # Limpar todas as quest√µes existentes
            print("üóëÔ∏è Removendo quest√µes existentes...")
            service = get_authenticated_service()
            if not service:
                print("‚ùå Erro na autentica√ß√£o!")
                return None
            
            # Obter formul√°rio atual para ver itens existentes
            form_info = service.forms().get(formId=form_id).execute()
            
            # Remover todos os itens existentes
            if 'items' in form_info and len(form_info['items']) > 0:
                delete_requests = []
                for item in form_info['items']:
                    delete_requests.append({
                        "deleteItem": {
                            "location": {"index": 0}  # Sempre remover o primeiro (a lista se reorganiza)
                        }
                    })
                
                # Executar remo√ß√µes em lotes
                if delete_requests:
                    service.forms().batchUpdate(formId=form_id, body={
                        "requests": delete_requests
                    }).execute()
            
            # Atualizar descri√ß√£o e ATIVAR MODO QUIZ
            print("üìù Atualizando descri√ß√£o e ativando modo Quiz...")
            
            # Processar description (pode ser string ou array)
            description = config['metadata']['description']
            if isinstance(description, list):
                description_text = "\n".join(description)
            else:
                description_text = description
            
            service.forms().batchUpdate(formId=form_id, body={
                "requests": [{
                    "updateFormInfo": {
                        "info": {
                            "title": config['metadata']['title'],
                            "description": description_text
                        },
                        "updateMask": "title,description"
                    }
                }, {
                    "updateSettings": {
                        "settings": {
                            "quizSettings": {
                                "isQuiz": True
                            }
                        },
                        "updateMask": "quizSettings.isQuiz"
                    }
                }]
            }).execute()
            
            print("‚úÖ Formul√°rio existente atualizado com nova configura√ß√£o!")
            
        else:
            print("üìã Criando novo formul√°rio...")
            
            # 4. Obter servi√ßo autenticado
            service = get_authenticated_service()
            if not service:
                print("‚ùå Erro na autentica√ß√£o!")
                return None
            
            print("‚úÖ Autenticado com sucesso!")
            
            # 5. Criar formul√°rio b√°sico (apenas t√≠tulo)
            form_result = service.forms().create(body={
                "info": {
                    "title": config['metadata']['title']
                }
            }).execute()
            
            form_id = form_result.get('formId')
            print(f"‚úÖ Formul√°rio criado! ID: {form_id}")
            
            # 6. Adicionar descri√ß√£o e ATIVAR MODO QUIZ
            print("üìù Adicionando descri√ß√£o e ativando modo Quiz...")
            
            # Processar description (pode ser string ou array)
            description = config['metadata']['description']
            if isinstance(description, list):
                description_text = "\n".join(description)
            else:
                description_text = description
            
            service.forms().batchUpdate(formId=form_id, body={
                "requests": [{
                    "updateFormInfo": {
                        "info": {
                            "title": config['metadata']['title'],
                            "description": description_text
                        },
                        "updateMask": "title,description"
                    }
                }, {
                    "updateSettings": {
                        "settings": {
                            "quizSettings": {
                                "isQuiz": True
                            }
                        },
                        "updateMask": "quizSettings.isQuiz"
                    }
                }]
            }).execute()
            
            # 7. Definir nome do arquivo no Google Drive
            drive_service = get_drive_service()
            if drive_service:
                drive_service.files().update(
                    fileId=form_id,
                    body={'name': form_name}
                ).execute()
                print(f"üìù Nome do arquivo definido: {form_name}")
            
            # 8. Remover item padr√£o que √© criado automaticamente
            print("üóëÔ∏è Removendo item padr√£o...")
            try:
                # Obter informa√ß√µes do formul√°rio para ver os itens
                form_info = service.forms().get(formId=form_id).execute()
                if 'items' in form_info and len(form_info['items']) > 0:
                    # Remover o primeiro item padr√£o
                    first_item_id = form_info['items'][0]['itemId']
                    service.forms().batchUpdate(formId=form_id, body={
                        "requests": [{
                            "deleteItem": {
                                "location": {"index": 0}
                            }
                        }]
                    }).execute()
            except Exception as e:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel remover item padr√£o: {e}")
        
        # 8. Adicionar se√ß√£o de instru√ß√µes
        instructions = config.get('content', {}).get('instructions', [])
        if instructions:
            print("Adicionando se√ß√£o de instru√ß√µes...")
            
            # Converter array de instru√ß√µes em texto formatado (sem quebras de linha)
            if isinstance(instructions, list):
                instructions_text = " ".join(instructions)  # Usar espa√ßo ao inv√©s de \n
            else:
                instructions_text = instructions
            
            instructions_request = {
                "createItem": {
                    "item": {
                        "title": instructions_text,
                        "textItem": {}
                    },
                    "location": {"index": 0}
                }
            }
            
            try:
                service.forms().batchUpdate(formId=form_id, body={"requests": [instructions_request]}).execute()
                print("Instru√ß√µes adicionadas!")
            except Exception as e:
                print(f"Erro ao adicionar instru√ß√µes: {e}")
        
        # 9. Adicionar quest√µes COM respostas corretas (modo Quiz simplificado)
        print(f"üìù Adicionando {len(config['questions'])} quest√µes em modo Quiz...")
        
        for i, question_data in enumerate(config['questions']):
            print(f"   Quest√£o {i+1}/{len(config['questions'])}...")
            
            # Preparar op√ß√µes
            options_clean = question_data['options'].copy()
            correct_answer_index = question_data['correct_answer']
            
            # Obter o n√∫mero atual de itens no formul√°rio para calcular o √≠ndice correto
            form_info = service.forms().get(formId=form_id).execute()
            current_items_count = len(form_info.get('items', []))
            
            # Criar quest√£o com configura√ß√£o de Quiz diretamente
            create_request = {
                "createItem": {
                    "item": {
                        "title": f"{question_data['id']}: {question_data['question']}",
                        "description": f"Se√ß√£o: {question_data['section']}",
                        "questionItem": {
                            "question": {
                                "required": True,
                                "choiceQuestion": {
                                    "type": "RADIO",
                                    "options": [{"value": opcao} for opcao in options_clean],
                                    "shuffle": False
                                },
                                "grading": {
                                    "pointValue": 1,
                                    "correctAnswers": {
                                        "answers": [{"value": question_data['options'][correct_answer_index]}]
                                    }
                                }
                            }
                        }
                    },
                    "location": {"index": current_items_count}
                }
            }
            
            try:
                service.forms().batchUpdate(formId=form_id, body={"requests": [create_request]}).execute()
                print(f"   ‚úÖ Quest√£o {i+1} criada com resposta correta!")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro na quest√£o {i+1}: {e}")
                # Fallback: criar sem grading
                fallback_request = {
                    "createItem": {
                        "item": {
                            "title": f"{question_data['id']}: {question_data['question']}",
                            "description": f"Se√ß√£o: {question_data['section']}",
                            "questionItem": {
                                "question": {
                                    "required": True,
                                    "choiceQuestion": {
                                        "type": "RADIO",
                                        "options": [{"value": opcao} for opcao in options_clean],
                                        "shuffle": False
                                    }
                                }
                            }
                        },
                        "location": {"index": i}
                    }
                }
                service.forms().batchUpdate(formId=form_id, body={"requests": [fallback_request]}).execute()
                print(f"   ‚úÖ Quest√£o {i+1} criada (sem grading)")
        
        print("‚úÖ Todas as quest√µes foram criadas!")
        
        # 6. Adicionar quest√µes de avalia√ß√£o (se habilitado)
        if config.get('evaluation', {}).get('include_evaluation', False):
            print("üìä Adicionando se√ß√£o de avalia√ß√£o...")
            
            eval_questions = config.get('evaluation', {}).get('evaluation_questions', [
                {
                    "question": "Como voc√™ avalia a dificuldade deste quiz?",
                    "options": ["Muito f√°cil", "F√°cil", "M√©dio", "Dif√≠cil", "Muito dif√≠cil"]
                },
                {
                    "question": "O que voc√™ achou das quest√µes?",
                    "options": ["Muito interessantes", "Interessantes", "Normais", "Chatas", "Muito chatas"]
                },
                {
                    "question": "Voc√™ recomendaria este quiz para seus colegas?",
                    "options": ["Sim, com certeza", "Sim", "Talvez", "N√£o", "Definitivamente n√£o"]
                }
            ])
            
            for i, eval_q in enumerate(eval_questions):
                print(f"   Avalia√ß√£o {i+1}/{len(eval_questions)}...")
                
                # Obter √≠ndice atual atualizado
                form_info = service.forms().get(formId=form_id).execute()
                current_items_count = len(form_info.get('items', []))
                
                request = {
                    "createItem": {
                        "item": {
                            "title": f"Avalia√ß√£o {i+1}: {eval_q['question']}",
                            "questionItem": {
                                "question": {
                                    "choiceQuestion": {
                                        "type": "RADIO",
                                        "options": [{"value": opcao} for opcao in eval_q['options']]
                                    }
                                }
                            }
                        },
                        "location": {"index": current_items_count}
                    }
                }
                
                service.forms().batchUpdate(formId=form_id, body={"requests": [request]}).execute()
        
        # 7. Aplicar configura√ß√µes de settings do JSON
        form_settings = config.get('settings', {})
        if form_settings:
            print("‚öôÔ∏è Aplicando configura√ß√µes de settings...")
            
            settings_updates = {}
            update_mask_parts = []
            
            # Configurar se deve coletar email e limitar respostas
            require_login = form_settings.get('require_login', False)
            collect_email = form_settings.get('collect_email', False) 
            allow_multiple_responses = form_settings.get('allow_multiple_responses', True)
            
            # Se require_login for True, automaticamente ativar collect_email
            if require_login:
                collect_email = True
                print("üîê Login obrigat√≥rio ativado - coleta de email habilitada")
            
            # Se allow_multiple_responses for False, limitar a uma resposta
            if not allow_multiple_responses:
                print("üìä Limitando a uma resposta por usu√°rio")
            
            # Aplicar configura√ß√µes
            if collect_email is not None:
                settings_updates["collectEmail"] = collect_email
                update_mask_parts.append("collectEmail")
            
            # Aplicar as configura√ß√µes se houver alguma
            if settings_updates and update_mask_parts:
                try:
                    service.forms().batchUpdate(formId=form_id, body={
                        "requests": [{
                            "updateSettings": {
                                "settings": settings_updates,
                                "updateMask": ",".join(update_mask_parts)
                            }
                        }]
                    }).execute()
                    print("‚úÖ Configura√ß√µes de settings aplicadas!")
                    
                    # Informar sobre limita√ß√µes da API
                    if not allow_multiple_responses or require_login:
                        print("üìù IMPORTANTE: Para garantir uma resposta por usu√°rio, voc√™ precisa:")
                        print("   1. Acessar o formul√°rio no Google Forms")
                        print("   2. Ir em Configura√ß√µes (√≠cone de engrenagem)")
                        print("   3. Marcar 'Limitar a uma resposta'")
                        print("   4. Verificar se 'Coletar endere√ßos de email' est√° ativado")
                        print(f"   üîó Acesse: {edit_url}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao aplicar configura√ß√µes de settings: {e}")
            else:
                print("üìù Nenhuma configura√ß√£o de settings para aplicar")
        
        # Sistema Quiz Google - n√£o precisamos de arquivo gabarito separado
        print("Formul√°rio criado em MODO QUIZ com respostas corretas configuradas!")
        print("O Google Forms calcular√° automaticamente as pontua√ß√µes")
        
        # URLs do formul√°rio
        edit_url = f"https://docs.google.com/forms/d/{form_id}/edit"
        public_url = f"https://docs.google.com/forms/d/{form_id}/viewform"
        
        # Estat√≠sticas por se√ß√£o
        secoes_stats = {}
        for q in config['questions']:
            secao = q['section']
            if secao not in secoes_stats:
                secoes_stats[secao] = 0
            secoes_stats[secao] += 1
        
        print("\n" + "="*60)
        print("üéâ FORMUL√ÅRIO QUIZ CRIADO COM SUCESSO!")
        print("="*60)
        print(f"üìù T√≠tulo: {config['metadata']['title']}")
        print(f"üìö Mat√©ria: {config['metadata']['subject']} - {config['metadata']['topic']}")
        print(f"üéì S√©rie: {config['metadata']['grade']}")
        print(f"üìä Total de quest√µes: {len(config['questions'])}")
        print(f"üéØ Modo: Quiz Google (c√°lculo autom√°tico de pontua√ß√£o)")
        
        # Informa√ß√µes sobre configura√ß√µes de autentica√ß√£o
        form_settings = config.get('settings', {})
        if form_settings.get('require_login', False):
            print(f"üîê Autentica√ß√£o: Login obrigat√≥rio")
            print(f"üìß Coleta de email: Ativada")
            print(f"üìä Respostas: Uma por usu√°rio logado")
        elif not form_settings.get('allow_multiple_responses', True):
            print(f"üìä Respostas: Uma por usu√°rio")
            if form_settings.get('collect_email', False):
                print(f"üìß Coleta de email: Ativada")
        elif form_settings.get('collect_email', False):
            print(f"üìß Coleta de email: Ativada")
        else:
            print(f"üåê Acesso: P√∫blico (sem restri√ß√µes)")
        
        print(f"üîó Link do editor: {edit_url}")
        print(f"üåê Link p√∫blico: {public_url}")
        print("\nüìö Distribui√ß√£o por se√ß√£o:")
        for secao, quantidade in secoes_stats.items():
            print(f"   ‚Ä¢ {secao}: {quantidade} quest√µes")
        
        if config.get('evaluation', {}).get('include_evaluation', False):
            eval_count = len(config.get('evaluation', {}).get('evaluation_questions', []))
            print(f"   ‚Ä¢ Avalia√ß√£o: {eval_count} quest√µes")
        
        print("\n‚úÖ Formul√°rio Quiz criado/atualizado e pronto para uso!")
        print("üéì Os alunos receber√£o pontua√ß√£o autom√°tica ap√≥s responder!")
        
        # 10. Organizar formul√°rio na pasta espec√≠fica no Google Drive
        print("üìÅ Organizando formul√°rio na pasta do Google Drive...")
        from config import find_or_create_folder, move_form_to_folder, GOOGLE_DRIVE_FOLDER_NAME
        
        folder_id = find_or_create_folder(GOOGLE_DRIVE_FOLDER_NAME)
        if folder_id:
            # Verificar se j√° est√° na pasta correta
            drive_service = get_drive_service()
            if drive_service:
                file_info = drive_service.files().get(fileId=form_id, fields='parents').execute()
                current_parents = file_info.get('parents', [])
                
                if folder_id not in current_parents:
                    print(f"üì¶ Movendo para pasta '{GOOGLE_DRIVE_FOLDER_NAME}'...")
                    if move_form_to_folder(form_id, folder_id):
                        print(f"‚úÖ Formul√°rio organizado na pasta '{GOOGLE_DRIVE_FOLDER_NAME}'")
                    else:
                        print("‚ö†Ô∏è Formul√°rio criado mas n√£o foi poss√≠vel mover para a pasta")
                else:
                    print(f"‚úÖ Formul√°rio j√° est√° na pasta '{GOOGLE_DRIVE_FOLDER_NAME}'")
        else:
            print("‚ö†Ô∏è Formul√°rio criado mas n√£o foi poss√≠vel encontrar/criar a pasta")
        
        print("="*60)
        
        return {
            'form_id': form_id,
            'edit_url': edit_url,
            'public_url': public_url,
            'total_questions': len(config['questions']),
            'sections': secoes_stats,
            'config': config
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao criar formul√°rio: {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """
    Fun√ß√£o principal que pode ser chamada diretamente ou via linha de comando.
    """
    import argparse
    
    parser = argparse.ArgumentParser(description='Gerar formul√°rio do Google Forms a partir de JSON')
    parser.add_argument('json_file', nargs='?', default='quiz_config.json',
                        help='Caminho para o arquivo JSON de configura√ß√£o')
    
    args = parser.parse_args()
    
    # Se n√£o foi passado argumento, usar o arquivo padr√£o na pasta atual
    if not os.path.isabs(args.json_file):
        json_path = os.path.join(os.path.dirname(__file__), args.json_file)
    else:
        json_path = args.json_file
    
    resultado = criar_formulario_do_json(json_path)
    
    if resultado:
        print(f"\nüéØ Formul√°rio criado com sucesso!")
        print(f"üìã Use este link para visualizar: {resultado['public_url']}")
        return resultado
    else:
        print("\n‚ùå Falha ao criar o formul√°rio!")
        return None


if __name__ == "__main__":
    main()
